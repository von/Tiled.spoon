[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "Tiler:bindHotKeys(table)",
        "desc": "The method accepts a single parameter, which is a table. The keys of the table",
        "doc": "The method accepts a single parameter, which is a table. The keys of the table\nare strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"f\"}\n   }\n\n\nParameters:\n * table - Table of action to key mappings\n\nReturns:\n * Tiler object",
        "name": "bindHotKeys",
        "parameters": [
          " * table - Table of action to key mappings"
        ],
        "returns": [
          " * Tiler object"
        ],
        "signature": "Tiler:bindHotKeys(table)",
        "stripped_doc": "are strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"f\"}\n   }",
        "type": "Function"
      },
      {
        "def": "Tiler:chooser",
        "desc": "Bring up a hs.chooser with a list of windows. Tile the chosen window to the right",
        "doc": "Bring up a hs.chooser with a list of windows. Tile the chosen window to the right\nof the currently focused window.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "chooser",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "Tiler:chooser",
        "stripped_doc": "of the currently focused window.",
        "type": "Function"
      },
      {
        "def": "Tiler:debug(enable)",
        "desc": "Enable or disable debugging",
        "doc": "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name": "debug",
        "parameters": [
          " * enable - Boolean indicating whether debugging should be on"
        ],
        "returns": [
          " * Nothing"
        ],
        "signature": "Tiler:debug(enable)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Tiler:init()",
        "desc": "Initializes a Tiler",
        "doc": "Initializes a Tiler\n\nParameters:\n * None\n\nReturns:\n * Tiler object",
        "name": "init",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Tiler object"
        ],
        "signature": "Tiler:init()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Tiler:start()",
        "desc": "Start background activity.",
        "doc": "Start background activity.\n\nParameters:\n * param - Some parameter\n\nReturns:\n * Tiler object",
        "name": "start",
        "parameters": [
          " * param - Some parameter"
        ],
        "returns": [
          " * Tiler object"
        ],
        "signature": "Tiler:start()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Tiler:stop()",
        "desc": "Stop background activity.",
        "doc": "Stop background activity.\n\nParameters:\n * param - Some parameter\n\nReturns:\n * Tiler object",
        "name": "stop",
        "parameters": [
          " * param - Some parameter"
        ],
        "returns": [
          " * Tiler object"
        ],
        "signature": "Tiler:stop()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "Method": [],
    "Variable": [],
    "desc": "Allows choosing a second window to tile next to the focused window.",
    "doc": "Allows choosing a second window to tile next to the focused window.\nTaken from @megalthic who apparently got if from @evantravers, who got it\nfrom @tmiller. Converted to a spoon by @von.",
    "items": [
      {
        "def": "Tiler:bindHotKeys(table)",
        "desc": "The method accepts a single parameter, which is a table. The keys of the table",
        "doc": "The method accepts a single parameter, which is a table. The keys of the table\nare strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"f\"}\n   }\n\n\nParameters:\n * table - Table of action to key mappings\n\nReturns:\n * Tiler object",
        "name": "bindHotKeys",
        "parameters": [
          " * table - Table of action to key mappings"
        ],
        "returns": [
          " * Tiler object"
        ],
        "signature": "Tiler:bindHotKeys(table)",
        "stripped_doc": "are strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"f\"}\n   }",
        "type": "Function"
      },
      {
        "def": "Tiler:chooser",
        "desc": "Bring up a hs.chooser with a list of windows. Tile the chosen window to the right",
        "doc": "Bring up a hs.chooser with a list of windows. Tile the chosen window to the right\nof the currently focused window.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "chooser",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "Tiler:chooser",
        "stripped_doc": "of the currently focused window.",
        "type": "Function"
      },
      {
        "def": "Tiler:debug(enable)",
        "desc": "Enable or disable debugging",
        "doc": "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name": "debug",
        "parameters": [
          " * enable - Boolean indicating whether debugging should be on"
        ],
        "returns": [
          " * Nothing"
        ],
        "signature": "Tiler:debug(enable)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Tiler:init()",
        "desc": "Initializes a Tiler",
        "doc": "Initializes a Tiler\n\nParameters:\n * None\n\nReturns:\n * Tiler object",
        "name": "init",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Tiler object"
        ],
        "signature": "Tiler:init()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Tiler:start()",
        "desc": "Start background activity.",
        "doc": "Start background activity.\n\nParameters:\n * param - Some parameter\n\nReturns:\n * Tiler object",
        "name": "start",
        "parameters": [
          " * param - Some parameter"
        ],
        "returns": [
          " * Tiler object"
        ],
        "signature": "Tiler:start()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Tiler:stop()",
        "desc": "Stop background activity.",
        "doc": "Stop background activity.\n\nParameters:\n * param - Some parameter\n\nReturns:\n * Tiler object",
        "name": "stop",
        "parameters": [
          " * param - Some parameter"
        ],
        "returns": [
          " * Tiler object"
        ],
        "signature": "Tiler:stop()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "name": "Tiler",
    "stripped_doc": "Taken from @megalthic who apparently got if from @evantravers, who got it\nfrom @tmiller. Converted to a spoon by @von.",
    "submodules": [],
    "type": "Module"
  }
]